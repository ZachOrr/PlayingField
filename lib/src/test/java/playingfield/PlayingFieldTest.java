/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package playingfield;

import org.junit.Test;

import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.geometry.Translation2d;
import playingfield.region.Circle;
import playingfield.region.Polygon;

import static org.junit.Assert.*;

public class PlayingFieldTest {

  @Test
  public void inRegionSquareTrue() {
    Translation2d translation = new Translation2d(5, 5);
    Polygon square = new Polygon(
      new Translation2d(0, 0),
      new Translation2d(0, 10),
      new Translation2d(10, 10),
      new Translation2d(10, 0)
    );
    assertTrue(PlayingField.inRegion(translation, square));
  }

  @Test
  public void inRegionSquareFalse() {
    Translation2d translation = new Translation2d(11, 0);
    Polygon square = new Polygon(
      new Translation2d(0, 0),
      new Translation2d(0, 10),
      new Translation2d(10, 10),
      new Translation2d(10, 0)
    );
    assertFalse(PlayingField.inRegion(translation, square));
  }

  @Test
  public void inRegionSquareBoundsFalse() {
    Translation2d translation = new Translation2d(10, 0);
    Polygon square = new Polygon(
      new Translation2d(0, 0),
      new Translation2d(0, 10),
      new Translation2d(10, 10),
      new Translation2d(10, 0)
    );
    assertFalse(PlayingField.inRegion(translation, square));
  }

  @Test
  public void inRegionCircleCenterTrue() {
    Translation2d translation = new Translation2d(5, 5);
    Circle circle = new Circle(new Translation2d(5, 5), 1.0);
    assertTrue(PlayingField.inRegion(translation, circle));
  }

  @Test
  public void inRegionCircleRadiusTrue() {
    Translation2d translation = new Translation2d(9.9999, 5);
    Circle circle = new Circle(new Translation2d(5, 5), 5.0);
    assertTrue(PlayingField.inRegion(translation, circle));
  }

  @Test
  public void inRegionCircleBoundsFalse() {
    Translation2d translation = new Translation2d(10, 5);
    Circle circle = new Circle(new Translation2d(5, 5), 5.0);
    assertFalse(PlayingField.inRegion(translation, circle));
  }

  @Test
  public void inRegionCircleFalse() {
    Translation2d translation = new Translation2d(11, 0);
    Circle circle = new Circle(new Translation2d(5, 5), 5.0);
    assertFalse(PlayingField.inRegion(translation, circle));
  }

  @Test
  public void isFacingFieldPerimeterLeftTrue() {
    Pose2d pose = new Pose2d(
      PlayingField.fieldLengthFeet / 2,
      PlayingField.fieldWidthFeet / 2,
      Rotation2d.fromDegrees(89)
    );
    assertTrue(PlayingField.isFacingFieldPerimeter(pose));
  }

  @Test
  public void isFacingFieldPerimeterLeftFalse() {
    Pose2d pose = new Pose2d(
      PlayingField.fieldLengthFeet / 2,
      PlayingField.fieldWidthFeet / 2,
      Rotation2d.fromDegrees(1)
    );
    assertFalse(PlayingField.isFacingFieldPerimeter(pose));
  }

  @Test
  public void isFacingFieldPerimeterRightTrue() {
    Pose2d pose = new Pose2d(
      PlayingField.fieldLengthFeet / 2,
      PlayingField.fieldWidthFeet / 2,
      Rotation2d.fromDegrees(269)
    );
    assertTrue(PlayingField.isFacingFieldPerimeter(pose));
  }

  @Test
  public void isFacingFieldPerimeterRightFalse() {
    Pose2d pose = new Pose2d(
      PlayingField.fieldLengthFeet / 2,
      PlayingField.fieldWidthFeet / 2,
      Rotation2d.fromDegrees(181)
    );
    assertFalse(PlayingField.isFacingFieldPerimeter(pose));
  }

  @Test
  public void isFacingFieldPerimeterNinety() {
    Pose2d pose = new Pose2d(
      PlayingField.fieldLengthFeet / 2,
      PlayingField.fieldWidthFeet / 2,
      Rotation2d.fromDegrees(90)
    );
    assertTrue(PlayingField.isFacingFieldPerimeter(pose));
  }

  @Test
  public void isFacingFieldPerimeterTwoSeventy() {
    Pose2d pose = new Pose2d(
      PlayingField.fieldLengthFeet / 2,
      PlayingField.fieldWidthFeet / 2,
      Rotation2d.fromDegrees(270)
    );
    assertTrue(PlayingField.isFacingFieldPerimeter(pose));
  }

  @Test
  public void isFacingFieldPerimeterZero() {
    Pose2d pose = new Pose2d(
      PlayingField.fieldLengthFeet / 2,
      PlayingField.fieldWidthFeet / 2,
      Rotation2d.fromDegrees(0)
    );
    assertFalse(PlayingField.isFacingFieldPerimeter(pose));
  }

  @Test
  public void isFacingFieldPerimeterOneEighty() {
    Pose2d pose = new Pose2d(
      PlayingField.fieldLengthFeet / 2,
      PlayingField.fieldWidthFeet / 2,
      Rotation2d.fromDegrees(180)
    );
    assertFalse(PlayingField.isFacingFieldPerimeter(pose));
  }

}
